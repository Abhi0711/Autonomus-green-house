#include "stm32f4xx.h"
#include <stdint.h>

void delay_ms(uint32_t ms);
void GPIOA_Init(void);
void GPIOB_Input_Init(void);

void SystemInit(void) {
    // Default system init
}

// Relay control pin = PA8
void GPIOA_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    GPIOA->MODER &= ~(3 << (8 * 2));  // Clear mode
    GPIOA->MODER |=  (1 << (8 * 2));  // Set PA8 as output

    GPIOA->OTYPER &= ~(1 << 8);       // Push-pull
    GPIOA->OSPEEDR |= (3 << (8 * 2)); // High speed
    GPIOA->PUPDR &= ~(3 << (8 * 2));  // No pull-up/down
}

// Switch input = PB7
void GPIOB_Input_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // Enable clock for GPIOB

    GPIOB->MODER &= ~(3 << (7 * 2));  // Set PB7 as input
    GPIOB->PUPDR |=  (1 << (7 * 2));  // Enable pull-up resistor
}

int main(void) {
    GPIOA_Init();       // PA8 = output for relay
    GPIOB_Input_Init(); // PB7 = input for switch

    uint8_t relay_state = 0;
    uint8_t last_button_state = 1; // Not pressed (default pull-up)

    while (1) {
        // Read PB7
        uint8_t button_state = (GPIOB->IDR & (1 << 7)) ? 1 : 0;

        // Detect falling edge (button press)
        if (last_button_state == 1 && button_state == 0) {
            relay_state = !relay_state; // Toggle relay

            if (relay_state) {
                GPIOA->ODR |= (1 << 8);  // Relay ON (bulb ON)
            } else {
                GPIOA->ODR &= ~(1 << 8); // Relay OFF (bulb OFF)
            }

            delay_ms(50); // Debounce
        }

        last_button_state = button_state;
    }
}

// Simple software delay (approximate)
void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 40000; i++) {
        __NOP();
    }
}
